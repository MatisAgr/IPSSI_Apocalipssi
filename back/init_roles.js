require('dotenv').config();
const mongoose = require('mongoose');
const Role = require('./models/roleModel');

async function initializeRoles() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // V√©rifier si des r√¥les existent d√©j√†
    const existingRoles = await Role.find();
    
    if (existingRoles.length > 0) {
      console.log('üìã R√¥les existants trouv√©s:');
      existingRoles.forEach(role => {
        console.log(`  - ${role.name} (ID: ${role._id})`);
      });
      console.log('\n‚ö†Ô∏è Des r√¥les existent d√©j√†. Voulez-vous les recr√©er ?');
      console.log('Pour forcer la recr√©ation, utilisez: node init_roles.js --force');
      
      if (!process.argv.includes('--force')) {
        return;
      }
      
      // Supprimer tous les r√¥les existants si --force
      await Role.deleteMany({});
      console.log('üóëÔ∏è Tous les r√¥les existants ont √©t√© supprim√©s');
    }

    // Cr√©er les r√¥les par d√©faut
    const defaultRoles = [
      { name: 'admin' },
      { name: 'user' },
      { name: 'moderator' }
    ];

    console.log('\nüèóÔ∏è Cr√©ation des r√¥les par d√©faut...');

    for (const roleData of defaultRoles) {
      const role = new Role({
        name: roleData.name,
        createdAt: new Date()
      });

      await role.save();
      console.log(`‚úÖ R√¥le "${role.name}" cr√©√© (ID: ${role._id})`);
    }

    console.log('\nüéâ Initialisation des r√¥les termin√©e !');

    // Afficher un r√©capitulatif
    const allRoles = await Role.find();
    console.log('\nüìã R√¥les disponibles:');
    allRoles.forEach(role => {
      console.log(`  - ${role.name} (ID: ${role._id})`);
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation des r√¥les:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå D√©connect√© de MongoDB');
  }
}

// Fonction pour v√©rifier l'existence des r√¥les
async function checkRoles() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    const roles = await Role.find();
    
    if (roles.length === 0) {
      console.log('‚ö†Ô∏è Aucun r√¥le trouv√© dans la base de donn√©es');
      console.log('Ex√©cutez: node init_roles.js pour cr√©er les r√¥les par d√©faut');
    } else {
      console.log('üìã R√¥les existants:');
      roles.forEach(role => {
        console.log(`  - ${role.name} (ID: ${role._id}, Cr√©√©: ${role.createdAt})`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
}

// D√©terminer quelle fonction ex√©cuter
const command = process.argv[2];

if (command === 'check') {
  checkRoles();
} else {
  initializeRoles();
}

module.exports = { initializeRoles, checkRoles };
